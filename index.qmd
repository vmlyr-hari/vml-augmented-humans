---
title: "MobilityCorp"
subtitle: "Proposed Solution by VML Augmented Humans"
number-sections: true
crossref: 
    chapters: true
format:
    html: default
    # pdf: 
    #     mermaid-format: png
---

<!-- 
Colors for C4 diagrams
#0075bdff
#009dffff
#00c3ffff 

-->

![VML Augmented Humans](assets/vml_augmented_humans_2.png)

__Note: This is effectively a Solution Design Sprint 0.  Lot's of conceptual ideas that need more detail and proving out.__

# Introduction

<!-- Add intro here -->



## Executive Summary

<!-- **Our Vision for MobilityCorp** ... -->

<!-- Add summary here -->

## Team

We are a team made up of people who make software for immersive experiences of all sizes.   Our invididual roles use words like Solution Architect, DevOps Engineer, Creative Technologist, Immersive Developer, Full-Stack Developer, etcetera.  

{{< include _team.qmd >}}

## Methodology

Our approach was to conduct a series of collaborative brainstorms, working effectively as a solution design sprint.  

* Collaborative Brainstroms
* Discuss real-world examples of similar models
* AI used to parse our notes, generate starter diagrams and syntehsize information
* AI used to check our work for consistency
* Human brains used for creative ideation and solution design

We didn't get as far as hoped for the formal documentation.  You can see the more raw outputs of our work and thinking in the [Sketches](sketches/index.qmd).

## Diagrams

Our diagrams are created in a markdown-friendly format at this stage.  While not perfect for diagramming, as developers this allows us to shif ideas more nimbly.

Broadly speaking, we are using the C4 model for software diagrams.  You may see some differences for expedience of writing in MermaidJS and Quarto-flavored markdown.

```{mermaid}
flowchart TD

%% Users
User["End User"]
Staff["Business User"]

%% Components
Data_Compute["Compute Artifact"]
AI_Component["AI Component"]

subgraph Boundary_or_Group["Boundary or Group"]
    Component
end

style User fill:#0075bdff,color:#fff
style Staff fill:#009dffff,color:#fff
style Data_Compute fill:#e6f3ff
style AI_Component fill:#f0e6ffff
```

<!-- #0075bdff
#009dffff
#00c3ffff 
#f0e6ffff
 -->

## Glossary

# MobilityCorp  

MobilityCorp is a growing provider of short-term, "last-mile" transport solutions. They operate a fleet of electric vehicles, including scooters, e-bikes, cars, and vans. Their primary market is dense city locations, but they are expanding their car and van rental services into more suburban areas.

MobilityCorp currently operates in the European Union (EU), but it's safe to say the business model is intended to grow.  Solutions should be locally effective and globally scaleable.

<!-- Their current operational model is as follows:

Customer Interaction: Customers use an NFC-capable smartphone app to sign up, locate, book, and operate the vehicles.
Booking & Rental:
Cars and vans can be booked up to 7 days in advance for a specific duration.
Bikes and scooters can be booked up to 30 minutes in advance for an open-ended rental, with a maximum duration of 12 hours.
Vehicle Management: All vehicles are equipped with GPS trackers for location monitoring. Cars and vans can be remotely disabled if necessary.
Payment: Customers are charged on a per-minute basis. Fines are automatically issued for late returns or for returning a vehicle to an incorrect location.
Return Process: Vehicles must be returned to designated parking spots. Cars and vans need to be plugged into an EV charger. Customers are required to submit a photo of the returned vehicle as proof of return and can provide feedback on its condition.
Logistics and Maintenance: The company employs staff to manually swap out batteries for bikes and scooters and to redistribute vehicles across the network to meet demand. -->


# Ask

MobilityCorp has asked us to come up with a new architecture, incorporating AI functionality where appropriate to address business challenges:

> Our customers can't find a vehicle when they need one, and our service crews are struggling to keep everything charged and maintained. We need a smarter system that tells us where to place our vehicles and how to run our operations more efficiently, so we can stop losing money and make our service reliable enough for daily use. [^ai-customer]

The solution should allow the business to:

* Know when customers will want to use vehicles
* Anticipate customer needs
* Anticiapte and optimize maintenance needs
* Grow our business
    - Increase use by existing customers 
    - Add new customers


# Solution

MobilityCorp's core challenge is not a lack of data, but a lack of actionable data and forward-looking insight.  To solve this, we propose an architecture enhanced with AI at key touchpoints in business processes and overall experience.

## Approach

First, we will look at the overally systems to ensure they are setup in a API-forward, service-oriented approach that allows for evolution, portability and change over time.  We aren't showing the whole system, but the parts most pertinent to our current problem scope.



### A Tiered Architecture

* Our Users enage with our MobilityCorp through applications focused on their particular needs
    - Customer use a mobile app
    - Staff or service technitions use a mobile app
    - Administrative or office staff use an app
* Our Apps interface with services or APIs
    - Booking service
    - Incentive service
    - Fleet service
    - Analytics service
    - AI Vision Service _Used at multiple layers in the stack_
    - GenAI Service _Used in content creation workflows or, optionally, real-time for gamified elements._
* Data is collected in our data warehouse
* MobilityCorp's Digital Twin is used as part of the Insights & Analytics Tier


```{mermaid}
graph TD
subgraph Users
    Customer[Customer]
    Staff["Maintenance Staff"]
    Admin["Admin Staff"]
end

CDN_WAF["Proxy"]

subgraph MobiltyCorpSystems["MobiltyCorp Platform"]

    subgraph Engagement_Tier["Engagement Layer"]
        Mobile_App["Mobile App"]
        Staff_App["Staff App"]
        Admin_App["Admin App"]
    end

    subgraph Services_Tier["Services Tier"]
        Booking_Service["Booking Service"]
        Incentive_Service["Incentive Service"]
        Fleet_Service["Fleet Service"]
        Analytics_Service["Analytics Service"]
        AI_Vision_Service["AI Vision Service"]
        AI_Gen_Service["GenAI Service*"]
    end

    subgraph Data_Insights_Tiers["Data Warehouse & Insights"]
        direction LR
        subgraph Data_Warehouse
        end

        subgraph AI_Analytics_Tier["Insights & Analytics Tier"]
            Digital_Twin["`Digital Twin<br>(Simulation Engine)`"]
            Demand_AI["Demand Forecasting AI"]
            Maint_AI["Maintenance Optimization AI"]
        end
    end
end

Customer ~~~ CDN_WAF
Staff    ~~~ CDN_WAF
Admin    ~~~ CDN_WAF

CDN_WAF ~~~ Mobile_App
CDN_WAF ~~~ Staff_App
CDN_WAF ~~~ Admin_App

Mobile_App  ~~~ Services_Tier
Staff_App   ~~~ Services_Tier
Admin_App   ~~~ Services_Tier

Services_Tier ~~~ Data_Warehouse
%% Services_Tier -- sends data --> AI_Analytics_Tier

%% AI_Analytics_Tier -- sends data --> Data_Warehouse
Data_Warehouse ~~~ AI_Analytics_Tier

Services_Tier ~~~ AI_Analytics_Tier

%% Styling
style Customer fill:#0075bdff,color:#fff
style Admin fill:#009dffff,color:#fff
style Staff fill:#009dffff,color:#fff

%% Styling - AI Analytics Tier
style AI_Analytics_Tier fill:#e6f3ff

%% Styling - AI Components
style AI_Vision_Service fill:#f0e6ffff
style Digital_Twin fill:#f0e6ffff
style Demand_AI fill:#f0e6ffff
style Maint_AI fill:#f0e6ffff
style AI_Gen_Service fill:#f0e6ffff
```

## System Context

### Customer

```{mermaid}
graph TD
Customer[Customer]
Mobile_App["Mobile App"]

subgraph Services_Tier["Services Tier"]
    Booking_Service["Booking Service"]
    Incentive_Service["Incentive Service"]
    Fleet_Service["Fleet Service"]
    Analytics_Service["Analytics Service"]
    AI_Vision_Service["AI Vision Service"]
    AI_Gen_Service["GenAI Service*"]
end


Customer --> Mobile_App

Mobile_App -- uses --> Booking_Service
Mobile_App -- uses --> Incentive_Service
Booking_Service -- uses --> Fleet_Service

Mobile_App -- sends data --> Analytics_Service
Mobile_App -. uses and embeds .-> AI_Vision_Service
Mobile_App -. uses or embeds .-> AI_Gen_Service

%% Styling
style Customer fill:#0075bdff,color:#fff

%% Styling - AI Components
style AI_Vision_Service fill:#f0e6ffff
style AI_Gen_Service fill:#f0e6ffff
```



# Footnotes & References

[^ai-customer]: We used WPP Open to create an AI agent to speak as the voice of the customer.